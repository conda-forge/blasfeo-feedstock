{% set name = "libblasfeo" %}
{% set version = "0.1.4.2" %}
{% set build = 0 %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://github.com/giaf/blasfeo/archive/refs/tags/{{ version }}.tar.gz
  sha256: df990206225095fb97ca1b1a3ebfe34cbc2cea7a8b2643ed3a6deb28a1848aa2

build:
  number: {{ build }}  # [not x86_64]
  number: {{ build + 100 }}  # [x86_64 and microarch_level == 1]
  number: {{ build + 300 }}  # [x86_64 and microarch_level == 3]
  number: {{ build + 400 }}  # [x86_64 and microarch_level == 4]
  run_exports:
    - {{ pin_subpackage(name, max_pin='x.x.x') }}
  script_env:
    # See https://github.com/giaf/blasfeo?tab=readme-ov-file#supported-computer-architectures
    # and https://clang.llvm.org/docs/UsersManual.html#x86
    # X64_INTEL_CORE is the TARGET setting more similar to nocona,
    # so we used that for no microarch_level and microarch_level == 1
    # microarch_level == 3 has AVX and AVX2, so it is basically TARGET X64_INTEL_HASWELL
    # microarch_level == 4 has AVX512F, so it is basically TARGET X64_INTEL_SKYLAKE_X
    - BLASFEO_TARGET=GENERIC  # [not (x86_64 or aarch64 or arm64)]
    - BLASFEO_TARGET=X64_INTEL_CORE  # [x86_64 and microarch_level == 1]
    - BLASFEO_TARGET=X64_INTEL_HASWELL  # [x86_64 and microarch_level == 3]
    # - BLASFEO_TARGET=X64_INTEL_SKYLAKE_X  # [linux and x86_64 and microarch_level == 4]
    # Modern arm processors (e.g. X Elite) have cache sizes more similar to the
    # M1 from Apple, thus we set TARGET to ARMV8A_APPLE_M1
    - BLASFEO_TARGET=ARMV8A_APPLE_M1  # [arm64]
    # On linux the main targets are mostly embedded systems like
    # Raspberry Pis, hence we target the  CORTEX A76.
    - BLASFEO_TARGET=ARMV8A_ARM_CORTEX_A76  # [aarch64]

requirements:
  build:
    # Note that x86_64-microarch-level doesn't support win,
    # but we can still specify microarch_level for win builds.
    # This package only sets the -march flags, but since the build process
    # is custom anyway, we don't care on win. 
    - x86_64-microarch-level {{ microarch_level }}  # [unix and x86_64]
    - {{ compiler('c') }}
    - {{ stdlib('c') }}
    - cmake
    - pkg-config
    - ninja
    - clang  # [win]
  run:
    - _x86_64-microarch-level >={{ microarch_level }}  # [x86_64]

test:
  commands:
    - test -f $PREFIX/include/blasfeo.h  # [unix]
    - test -f $PREFIX/lib/libblasfeo${SHLIB_EXT}  # [unix]
    - test -f $PREFIX/cmake/blasfeoConfig.cmake   # [unix]
    - nm -s $PREFIX/lib/libblasfeo.so | grep "U "  # [linux]
    - if not exist %PREFIX%\\Library\\cmake\\blasfeoConfig.cmake exit 1  # [win]
    - if not exist %LIBRARY_INC%\\blasfeo.h exit 1  # [win]
    - if not exist %LIBRARY_LIB%\\blasfeo.lib exit 1  # [win]
    - if not exist %LIBRARY_BIN%\\blasfeo.dll exit 1  # [win]

about:
  home: https://github.com/giaf/blasfeo
  license: BSD-2-Clause
  license_file: LICENSE.txt
  summary: Basic linear algebra subroutines for embedded optimization

extra:
  feedstock-name: blasfeo
  recipe-maintainers:
    - RSchwan
    - traversaro
